---
- hosts: all
  become: true
  environment:
    hostname: k8s-node1
  #   KUBECONFIG: /etc/kubernetes/admin.conf
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common 
      - gnupg2
      - lsb-release
      - git
      - vim
      - net-tools
      - qemu-guest-agent

# Configure VM
  - name: set timezone
    shell: timedatectl set-timezone America/Sao_Paulo

  - name: Set a hostname
    ansible.builtin.hostname:
      name: "{{ansible_env.hostname}}"

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Enable kernel modules
    shell: |
      modprobe overlay
      modprobe br_netfilter

  - name: Configure IP forwarding and iptables
    blockinfile:
      create: true
      path: /etc/modules-load.d/k8s.conf
      block: |
        overlay
        br_netfilter

  - name: sysctl params required by setup, params persist across reboots
    blockinfile:
      create: true
      path: /etc/sysctl.d/k8s.conf
      block: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
  
  - name: Apply sysctl params without reboot
    command: sysctl --system

# Install ContainerD from binary

  - name: Extract Containerd
    ansible.builtin.unarchive:
      src: https://github.com/containerd/containerd/releases/download/v1.6.6/containerd-1.6.6-linux-amd64.tar.gz
      dest: /usr/local
      remote_src: yes

  - name: Install containerd service
    get_url: 
      url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
      dest: /usr/lib/systemd/system/containerd.service
      mode: '0644'

  - name: Just force systemd to reread configs
    ansible.builtin.systemd:
      daemon_reload: yes

  - name: Enable service containerd
    ansible.builtin.systemd:
      name: containerd
      enabled: yes
      state: started
      masked: no

# Install runC

  - name: Download runc
    get_url:
      url: https://github.com/opencontainers/runc/releases/download/v1.1.3/runc.amd64
      dest: /usr/local/sbin/runc
      mode: '0755'

# Install CNI Plugins

  - name: Create a directory if it does not exist
    ansible.builtin.file:
      path: /opt/cni/bin
      state: directory
      mode: '0755'

  - name: Extract CNI Plugins
    ansible.builtin.unarchive:
      src: https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
      dest: /opt/cni/bin
      remote_src: yes

# Configuring systemd cgroup
  - name: generate containerd config.toml
    command: containerd config default > /etc/containerd/config.toml

  - name: Just force systemd to reread configs (2.4 and above)
    ansible.builtin.systemd:
      daemon_reload: yes

# Kubernetes Install

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet=1.24.2-00
        - kubeadm=1.24.2-00
        - kubectl=1.24.2-00

  - name: Just force systemd to reread configs (2.4 and above)
    ansible.builtin.systemd:
      daemon_reload: yes

  # - name: Copy the join command to server location
  #   copy: src=join-command dest=/tmp/join-command.sh mode=0777

  # - name: Join the node to cluster
  #   command: sh /tmp/join-command.sh